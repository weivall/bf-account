// Code generated by protoc-gen-go.
// source: account.proto
// DO NOT EDIT!

/*
Package account is a generated protocol buffer package.

It is generated from these files:
	account.proto

It has these top-level messages:
	SubscriptionTokenInfo
	AccountSubscription
	CurrencyRate
	AccountFundsResponse
	DeveloperAppVersion
	StatementLegacyData
	TransferResponse
	AccountDetailsResponse
	ApplicationSubscription
	AccountStatementReport
	AccountFundsRequest
	AccountStatementRequest
	StatementItem
	DeveloperApp
	TimeRange
	SubscriptionHistory
*/
package account

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Exception int32

const (
	Exception_INVALID_INPUT_DATA          Exception = 0
	Exception_INVALID_SESSION_INFORMATION Exception = 1
	Exception_UNEXPECTED_ERROR            Exception = 2
	Exception_INVALID_APP_KEY             Exception = 3
	Exception_SERVICE_BUSY                Exception = 4
	Exception_TIMEOUT_ERROR               Exception = 5
	Exception_DUPLICATE_APP_NAME          Exception = 6
	Exception_APP_KEY_CREATION_FAILED     Exception = 7
	Exception_APP_CREATION_FAILED         Exception = 8
	Exception_NO_SESSION                  Exception = 9
	Exception_NO_APP_KEY                  Exception = 10
	Exception_SUBSCRIPTION_EXPIRED        Exception = 11
	Exception_INVALID_SUBSCRIPTION_TOKEN  Exception = 12
	Exception_TOO_MANY_REQUESTS           Exception = 13
	Exception_INVALID_CLIENT_REF          Exception = 14
	Exception_WALLET_TRANSFER_ERROR       Exception = 15
	Exception_INVALID_VENDOR_CLIENT_ID    Exception = 16
)

var Exception_name = map[int32]string{
	0:  "INVALID_INPUT_DATA",
	1:  "INVALID_SESSION_INFORMATION",
	2:  "UNEXPECTED_ERROR",
	3:  "INVALID_APP_KEY",
	4:  "SERVICE_BUSY",
	5:  "TIMEOUT_ERROR",
	6:  "DUPLICATE_APP_NAME",
	7:  "APP_KEY_CREATION_FAILED",
	8:  "APP_CREATION_FAILED",
	9:  "NO_SESSION",
	10: "NO_APP_KEY",
	11: "SUBSCRIPTION_EXPIRED",
	12: "INVALID_SUBSCRIPTION_TOKEN",
	13: "TOO_MANY_REQUESTS",
	14: "INVALID_CLIENT_REF",
	15: "WALLET_TRANSFER_ERROR",
	16: "INVALID_VENDOR_CLIENT_ID",
}
var Exception_value = map[string]int32{
	"INVALID_INPUT_DATA":          0,
	"INVALID_SESSION_INFORMATION": 1,
	"UNEXPECTED_ERROR":            2,
	"INVALID_APP_KEY":             3,
	"SERVICE_BUSY":                4,
	"TIMEOUT_ERROR":               5,
	"DUPLICATE_APP_NAME":          6,
	"APP_KEY_CREATION_FAILED":     7,
	"APP_CREATION_FAILED":         8,
	"NO_SESSION":                  9,
	"NO_APP_KEY":                  10,
	"SUBSCRIPTION_EXPIRED":        11,
	"INVALID_SUBSCRIPTION_TOKEN":  12,
	"TOO_MANY_REQUESTS":           13,
	"INVALID_CLIENT_REF":          14,
	"WALLET_TRANSFER_ERROR":       15,
	"INVALID_VENDOR_CLIENT_ID":    16,
}

func (x Exception) String() string {
	return proto.EnumName(Exception_name, int32(x))
}
func (Exception) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type LoginStatus int32

const (
	LoginStatus_ACCOUNT_ALREADY_LOCKED                  LoginStatus = 0
	LoginStatus_ACCOUNT_NOW_LOCKED                      LoginStatus = 1
	LoginStatus_ACCOUNT_PENDING_PASSWORD_CHANGE         LoginStatus = 2
	LoginStatus_AGENT_CLIENT_MASTER                     LoginStatus = 3
	LoginStatus_AGENT_CLIENT_MASTER_SUSPENDED           LoginStatus = 4
	LoginStatus_BETTING_RESTRICTED_LOCATION             LoginStatus = 5
	LoginStatus_CERT_AUTH_REQUIRED                      LoginStatus = 6
	LoginStatus_CHANGE_PASSWORD_REQUIRED                LoginStatus = 7
	LoginStatus_CLOSED                                  LoginStatus = 8
	LoginStatus_DANISH_AUTHORIZATION_REQUIRED           LoginStatus = 9
	LoginStatus_DENMARK_MIGRATION_REQUIRED              LoginStatus = 10
	LoginStatus_DUPLICATE_CARDS                         LoginStatus = 11
	LoginStatus_EMAIL_LOGIN_NOT_ALLOWED                 LoginStatus = 12
	LoginStatus_INTERNATIONAL_TERMS_ACCEPTANCE_REQUIRED LoginStatus = 13
	LoginStatus_INVALID_CONNECTIVITY_TO_REGULATOR_DK    LoginStatus = 14
	LoginStatus_INVALID_CONNECTIVITY_TO_REGULATOR_IT    LoginStatus = 15
	LoginStatus_INVALID_USERNAME_OR_PASSWORD            LoginStatus = 16
	LoginStatus_ITALIAN_CONTRACT_ACCEPTANCE_REQUIRED    LoginStatus = 17
	LoginStatus_KYC_SUSPEND                             LoginStatus = 18
	LoginStatus_MULTIPLE_USERS_WITH_SAME_CREDENTIAL     LoginStatus = 19
	LoginStatus_NOT_AUTHORIZED_BY_REGULATOR_DK          LoginStatus = 20
	LoginStatus_NOT_AUTHORIZED_BY_REGULATOR_IT          LoginStatus = 21
	LoginStatus_PENDING_AUTH                            LoginStatus = 22
	LoginStatus_PERSONAL_MESSAGE_REQUIRED               LoginStatus = 23
	LoginStatus_SECURITY_QUESTION_WRONG_3X              LoginStatus = 24
	LoginStatus_SECURITY_RESTRICTED_LOCATION            LoginStatus = 25
	LoginStatus_SELF_EXCLUDED                           LoginStatus = 26
	LoginStatus_SPAIN_MIGRATION_REQUIRED                LoginStatus = 27
	LoginStatus_SPANISH_TERMS_ACCEPTANCE_REQUIRED       LoginStatus = 28
	LoginStatus_SUSPENDED                               LoginStatus = 29
	LoginStatus_TELBET_TERMS_CONDITIONS_NA              LoginStatus = 30
	LoginStatus_TRADING_MASTER                          LoginStatus = 31
	LoginStatus_TRADING_MASTER_SUSPENDED                LoginStatus = 32
)

var LoginStatus_name = map[int32]string{
	0:  "ACCOUNT_ALREADY_LOCKED",
	1:  "ACCOUNT_NOW_LOCKED",
	2:  "ACCOUNT_PENDING_PASSWORD_CHANGE",
	3:  "AGENT_CLIENT_MASTER",
	4:  "AGENT_CLIENT_MASTER_SUSPENDED",
	5:  "BETTING_RESTRICTED_LOCATION",
	6:  "CERT_AUTH_REQUIRED",
	7:  "CHANGE_PASSWORD_REQUIRED",
	8:  "CLOSED",
	9:  "DANISH_AUTHORIZATION_REQUIRED",
	10: "DENMARK_MIGRATION_REQUIRED",
	11: "DUPLICATE_CARDS",
	12: "EMAIL_LOGIN_NOT_ALLOWED",
	13: "INTERNATIONAL_TERMS_ACCEPTANCE_REQUIRED",
	14: "INVALID_CONNECTIVITY_TO_REGULATOR_DK",
	15: "INVALID_CONNECTIVITY_TO_REGULATOR_IT",
	16: "INVALID_USERNAME_OR_PASSWORD",
	17: "ITALIAN_CONTRACT_ACCEPTANCE_REQUIRED",
	18: "KYC_SUSPEND",
	19: "MULTIPLE_USERS_WITH_SAME_CREDENTIAL",
	20: "NOT_AUTHORIZED_BY_REGULATOR_DK",
	21: "NOT_AUTHORIZED_BY_REGULATOR_IT",
	22: "PENDING_AUTH",
	23: "PERSONAL_MESSAGE_REQUIRED",
	24: "SECURITY_QUESTION_WRONG_3X",
	25: "SECURITY_RESTRICTED_LOCATION",
	26: "SELF_EXCLUDED",
	27: "SPAIN_MIGRATION_REQUIRED",
	28: "SPANISH_TERMS_ACCEPTANCE_REQUIRED",
	29: "SUSPENDED",
	30: "TELBET_TERMS_CONDITIONS_NA",
	31: "TRADING_MASTER",
	32: "TRADING_MASTER_SUSPENDED",
}
var LoginStatus_value = map[string]int32{
	"ACCOUNT_ALREADY_LOCKED":                  0,
	"ACCOUNT_NOW_LOCKED":                      1,
	"ACCOUNT_PENDING_PASSWORD_CHANGE":         2,
	"AGENT_CLIENT_MASTER":                     3,
	"AGENT_CLIENT_MASTER_SUSPENDED":           4,
	"BETTING_RESTRICTED_LOCATION":             5,
	"CERT_AUTH_REQUIRED":                      6,
	"CHANGE_PASSWORD_REQUIRED":                7,
	"CLOSED":                                  8,
	"DANISH_AUTHORIZATION_REQUIRED":           9,
	"DENMARK_MIGRATION_REQUIRED":              10,
	"DUPLICATE_CARDS":                         11,
	"EMAIL_LOGIN_NOT_ALLOWED":                 12,
	"INTERNATIONAL_TERMS_ACCEPTANCE_REQUIRED": 13,
	"INVALID_CONNECTIVITY_TO_REGULATOR_DK":    14,
	"INVALID_CONNECTIVITY_TO_REGULATOR_IT":    15,
	"INVALID_USERNAME_OR_PASSWORD":            16,
	"ITALIAN_CONTRACT_ACCEPTANCE_REQUIRED":    17,
	"KYC_SUSPEND":                             18,
	"MULTIPLE_USERS_WITH_SAME_CREDENTIAL":     19,
	"NOT_AUTHORIZED_BY_REGULATOR_DK":          20,
	"NOT_AUTHORIZED_BY_REGULATOR_IT":          21,
	"PENDING_AUTH":                            22,
	"PERSONAL_MESSAGE_REQUIRED":               23,
	"SECURITY_QUESTION_WRONG_3X":              24,
	"SECURITY_RESTRICTED_LOCATION":            25,
	"SELF_EXCLUDED":                           26,
	"SPAIN_MIGRATION_REQUIRED":                27,
	"SPANISH_TERMS_ACCEPTANCE_REQUIRED":       28,
	"SUSPENDED":                               29,
	"TELBET_TERMS_CONDITIONS_NA":              30,
	"TRADING_MASTER":                          31,
	"TRADING_MASTER_SUSPENDED":                32,
}

func (x LoginStatus) String() string {
	return proto.EnumName(LoginStatus_name, int32(x))
}
func (LoginStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type SubscriptionStatus int32

const (
	SubscriptionStatus_ACTIVATED   SubscriptionStatus = 0
	SubscriptionStatus_UNACTIVATED SubscriptionStatus = 1
	SubscriptionStatus_CANCELLED   SubscriptionStatus = 2
	SubscriptionStatus_EXPIRED     SubscriptionStatus = 3
	SubscriptionStatus_ALL         SubscriptionStatus = 4
)

var SubscriptionStatus_name = map[int32]string{
	0: "ACTIVATED",
	1: "UNACTIVATED",
	2: "CANCELLED",
	3: "EXPIRED",
	4: "ALL",
}
var SubscriptionStatus_value = map[string]int32{
	"ACTIVATED":   0,
	"UNACTIVATED": 1,
	"CANCELLED":   2,
	"EXPIRED":     3,
	"ALL":         4,
}

func (x SubscriptionStatus) String() string {
	return proto.EnumName(SubscriptionStatus_name, int32(x))
}
func (SubscriptionStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Status int32

const (
	Status_SUCCESS Status = 0
)

var Status_name = map[int32]string{
	0: "SUCCESS",
}
var Status_value = map[string]int32{
	"SUCCESS": 0,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}
func (Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type Wallet int32

const (
	Wallet_UK         Wallet = 0
	Wallet_AUSTRALIAN Wallet = 1
)

var Wallet_name = map[int32]string{
	0: "UK",
	1: "AUSTRALIAN",
}
var Wallet_value = map[string]int32{
	"UK":         0,
	"AUSTRALIAN": 1,
}

func (x Wallet) String() string {
	return proto.EnumName(Wallet_name, int32(x))
}
func (Wallet) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type ItemClass int32

const (
	ItemClass_UNKNOWN ItemClass = 0
)

var ItemClass_name = map[int32]string{
	0: "UNKNOWN",
}
var ItemClass_value = map[string]int32{
	"UNKNOWN": 0,
}

func (x ItemClass) String() string {
	return proto.EnumName(ItemClass_name, int32(x))
}
func (ItemClass) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type StatementLegacyData_WinLose int32

const (
	StatementLegacyData_RESULT_ERR            StatementLegacyData_WinLose = 0
	StatementLegacyData_RESULT_FIX            StatementLegacyData_WinLose = 1
	StatementLegacyData_RESULT_LOST           StatementLegacyData_WinLose = 2
	StatementLegacyData_RESULT_NOT_APPLICABLE StatementLegacyData_WinLose = 3
	StatementLegacyData_RESULT_WON            StatementLegacyData_WinLose = 4
	StatementLegacyData_COMMISSION_REVERSAL   StatementLegacyData_WinLose = 5
)

var StatementLegacyData_WinLose_name = map[int32]string{
	0: "RESULT_ERR",
	1: "RESULT_FIX",
	2: "RESULT_LOST",
	3: "RESULT_NOT_APPLICABLE",
	4: "RESULT_WON",
	5: "COMMISSION_REVERSAL",
}
var StatementLegacyData_WinLose_value = map[string]int32{
	"RESULT_ERR":            0,
	"RESULT_FIX":            1,
	"RESULT_LOST":           2,
	"RESULT_NOT_APPLICABLE": 3,
	"RESULT_WON":            4,
	"COMMISSION_REVERSAL":   5,
}

func (x StatementLegacyData_WinLose) String() string {
	return proto.EnumName(StatementLegacyData_WinLose_name, int32(x))
}
func (StatementLegacyData_WinLose) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{5, 0}
}

type AccountStatementRequest_IncludeItem int32

const (
	AccountStatementRequest_ALL                  AccountStatementRequest_IncludeItem = 0
	AccountStatementRequest_DEPOSITS_WITHDRAWALS AccountStatementRequest_IncludeItem = 1
	AccountStatementRequest_EXCHANGE             AccountStatementRequest_IncludeItem = 2
	AccountStatementRequest_POKER_ROOM           AccountStatementRequest_IncludeItem = 3
)

var AccountStatementRequest_IncludeItem_name = map[int32]string{
	0: "ALL",
	1: "DEPOSITS_WITHDRAWALS",
	2: "EXCHANGE",
	3: "POKER_ROOM",
}
var AccountStatementRequest_IncludeItem_value = map[string]int32{
	"ALL": 0,
	"DEPOSITS_WITHDRAWALS": 1,
	"EXCHANGE":             2,
	"POKER_ROOM":           3,
}

func (x AccountStatementRequest_IncludeItem) String() string {
	return proto.EnumName(AccountStatementRequest_IncludeItem_name, int32(x))
}
func (AccountStatementRequest_IncludeItem) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{11, 0}
}

type SubscriptionTokenInfo struct {
	SubscriptionToken    string                     `protobuf:"bytes,1,opt,name=subscriptionToken" json:"subscriptionToken,omitempty"`
	ActivatedDateTime    *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=activatedDateTime" json:"activatedDateTime,omitempty"`
	ExpiryDateTime       *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=expiryDateTime" json:"expiryDateTime,omitempty"`
	ExpiredDateTime      *google_protobuf.Timestamp `protobuf:"bytes,4,opt,name=expiredDateTime" json:"expiredDateTime,omitempty"`
	CancellationDateTime *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=cancellationDateTime" json:"cancellationDateTime,omitempty"`
	SubscriptionStatus   SubscriptionStatus         `protobuf:"varint,6,opt,name=subscriptionStatus,enum=account.SubscriptionStatus" json:"subscriptionStatus,omitempty"`
}

func (m *SubscriptionTokenInfo) Reset()                    { *m = SubscriptionTokenInfo{} }
func (m *SubscriptionTokenInfo) String() string            { return proto.CompactTextString(m) }
func (*SubscriptionTokenInfo) ProtoMessage()               {}
func (*SubscriptionTokenInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SubscriptionTokenInfo) GetActivatedDateTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.ActivatedDateTime
	}
	return nil
}

func (m *SubscriptionTokenInfo) GetExpiryDateTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.ExpiryDateTime
	}
	return nil
}

func (m *SubscriptionTokenInfo) GetExpiredDateTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.ExpiredDateTime
	}
	return nil
}

func (m *SubscriptionTokenInfo) GetCancellationDateTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.CancellationDateTime
	}
	return nil
}

type AccountSubscription struct {
	SubscriptionTokens   []*SubscriptionTokenInfo `protobuf:"bytes,1,rep,name=subscriptionTokens" json:"subscriptionTokens,omitempty"`
	ApplicationName      string                   `protobuf:"bytes,2,opt,name=applicationName" json:"applicationName,omitempty"`
	ApplicationVersionId string                   `protobuf:"bytes,3,opt,name=applicationVersionId" json:"applicationVersionId,omitempty"`
}

func (m *AccountSubscription) Reset()                    { *m = AccountSubscription{} }
func (m *AccountSubscription) String() string            { return proto.CompactTextString(m) }
func (*AccountSubscription) ProtoMessage()               {}
func (*AccountSubscription) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AccountSubscription) GetSubscriptionTokens() []*SubscriptionTokenInfo {
	if m != nil {
		return m.SubscriptionTokens
	}
	return nil
}

type CurrencyRate struct {
	CurrencyCode string  `protobuf:"bytes,1,opt,name=currencyCode" json:"currencyCode,omitempty"`
	Rate         float32 `protobuf:"fixed32,2,opt,name=rate" json:"rate,omitempty"`
}

func (m *CurrencyRate) Reset()                    { *m = CurrencyRate{} }
func (m *CurrencyRate) String() string            { return proto.CompactTextString(m) }
func (*CurrencyRate) ProtoMessage()               {}
func (*CurrencyRate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type AccountFundsResponse struct {
	AvailableToBetBalance float32 `protobuf:"fixed32,1,opt,name=availableToBetBalance" json:"availableToBetBalance,omitempty"`
	Exposure              float32 `protobuf:"fixed32,2,opt,name=exposure" json:"exposure,omitempty"`
	RetainedCommission    float32 `protobuf:"fixed32,3,opt,name=retainedCommission" json:"retainedCommission,omitempty"`
	ExposureLimit         float32 `protobuf:"fixed32,4,opt,name=exposureLimit" json:"exposureLimit,omitempty"`
	DiscountRate          float32 `protobuf:"fixed32,5,opt,name=discountRate" json:"discountRate,omitempty"`
	PointsBalance         int32   `protobuf:"varint,6,opt,name=pointsBalance" json:"pointsBalance,omitempty"`
}

func (m *AccountFundsResponse) Reset()                    { *m = AccountFundsResponse{} }
func (m *AccountFundsResponse) String() string            { return proto.CompactTextString(m) }
func (*AccountFundsResponse) ProtoMessage()               {}
func (*AccountFundsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type DeveloperAppVersion struct {
	Owner                string `protobuf:"bytes,1,opt,name=owner" json:"owner,omitempty"`
	VersionId            uint32 `protobuf:"varint,2,opt,name=versionId" json:"versionId,omitempty"`
	Version              string `protobuf:"bytes,3,opt,name=version" json:"version,omitempty"`
	ApplicationKey       string `protobuf:"bytes,4,opt,name=applicationKey" json:"applicationKey,omitempty"`
	DelayData            bool   `protobuf:"varint,5,opt,name=delayData" json:"delayData,omitempty"`
	SubscriptionRequired bool   `protobuf:"varint,6,opt,name=subscriptionRequired" json:"subscriptionRequired,omitempty"`
	OwnerManaged         bool   `protobuf:"varint,7,opt,name=ownerManaged" json:"ownerManaged,omitempty"`
	Active               bool   `protobuf:"varint,8,opt,name=active" json:"active,omitempty"`
}

func (m *DeveloperAppVersion) Reset()                    { *m = DeveloperAppVersion{} }
func (m *DeveloperAppVersion) String() string            { return proto.CompactTextString(m) }
func (*DeveloperAppVersion) ProtoMessage()               {}
func (*DeveloperAppVersion) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type StatementLegacyData struct {
	AvgPrice        float32                     `protobuf:"fixed32,1,opt,name=avgPrice" json:"avgPrice,omitempty"`
	BetSize         float32                     `protobuf:"fixed32,2,opt,name=betSize" json:"betSize,omitempty"`
	BetType         string                      `protobuf:"bytes,3,opt,name=betType" json:"betType,omitempty"`
	BetCategoryType string                      `protobuf:"bytes,4,opt,name=betCategoryType" json:"betCategoryType,omitempty"`
	CommissionRate  string                      `protobuf:"bytes,5,opt,name=commissionRate" json:"commissionRate,omitempty"`
	EventId         int32                       `protobuf:"varint,6,opt,name=eventId" json:"eventId,omitempty"`
	EventTypeId     int32                       `protobuf:"varint,7,opt,name=eventTypeId" json:"eventTypeId,omitempty"`
	FullMarketName  string                      `protobuf:"bytes,8,opt,name=fullMarketName" json:"fullMarketName,omitempty"`
	GrossBetAmount  float32                     `protobuf:"fixed32,9,opt,name=grossBetAmount" json:"grossBetAmount,omitempty"`
	MarketName      string                      `protobuf:"bytes,10,opt,name=marketName" json:"marketName,omitempty"`
	MarketType      string                      `protobuf:"bytes,11,opt,name=marketType" json:"marketType,omitempty"`
	PlacedDate      *google_protobuf.Timestamp  `protobuf:"bytes,12,opt,name=placedDate" json:"placedDate,omitempty"`
	SelectionId     int32                       `protobuf:"varint,13,opt,name=selectionId" json:"selectionId,omitempty"`
	SelectionName   string                      `protobuf:"bytes,14,opt,name=selectionName" json:"selectionName,omitempty"`
	StartDate       *google_protobuf.Timestamp  `protobuf:"bytes,15,opt,name=startDate" json:"startDate,omitempty"`
	TransactionType string                      `protobuf:"bytes,16,opt,name=transactionType" json:"transactionType,omitempty"`
	TransactionId   uint64                      `protobuf:"varint,17,opt,name=transactionId" json:"transactionId,omitempty"`
	WinLose         StatementLegacyData_WinLose `protobuf:"varint,18,opt,name=winLose,enum=account.StatementLegacyData_WinLose" json:"winLose,omitempty"`
}

func (m *StatementLegacyData) Reset()                    { *m = StatementLegacyData{} }
func (m *StatementLegacyData) String() string            { return proto.CompactTextString(m) }
func (*StatementLegacyData) ProtoMessage()               {}
func (*StatementLegacyData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *StatementLegacyData) GetPlacedDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.PlacedDate
	}
	return nil
}

func (m *StatementLegacyData) GetStartDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.StartDate
	}
	return nil
}

type TransferResponse struct {
	TransactionId string `protobuf:"bytes,1,opt,name=transactionId" json:"transactionId,omitempty"`
}

func (m *TransferResponse) Reset()                    { *m = TransferResponse{} }
func (m *TransferResponse) String() string            { return proto.CompactTextString(m) }
func (*TransferResponse) ProtoMessage()               {}
func (*TransferResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type AccountDetailsResponse struct {
	CurrencyCode  string  `protobuf:"bytes,1,opt,name=currencyCode" json:"currencyCode,omitempty"`
	FirstName     string  `protobuf:"bytes,2,opt,name=firstName" json:"firstName,omitempty"`
	LastName      string  `protobuf:"bytes,3,opt,name=lastName" json:"lastName,omitempty"`
	LocaleCode    string  `protobuf:"bytes,4,opt,name=localeCode" json:"localeCode,omitempty"`
	Region        string  `protobuf:"bytes,5,opt,name=region" json:"region,omitempty"`
	Timezone      string  `protobuf:"bytes,6,opt,name=timezone" json:"timezone,omitempty"`
	DiscountRate  float32 `protobuf:"fixed32,7,opt,name=discountRate" json:"discountRate,omitempty"`
	PointsBalance int32   `protobuf:"varint,8,opt,name=pointsBalance" json:"pointsBalance,omitempty"`
	CountryCode   string  `protobuf:"bytes,9,opt,name=countryCode" json:"countryCode,omitempty"`
}

func (m *AccountDetailsResponse) Reset()                    { *m = AccountDetailsResponse{} }
func (m *AccountDetailsResponse) String() string            { return proto.CompactTextString(m) }
func (*AccountDetailsResponse) ProtoMessage()               {}
func (*AccountDetailsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type ApplicationSubscription struct {
	SubscriptionToken    string                     `protobuf:"bytes,1,opt,name=subscriptionToken" json:"subscriptionToken,omitempty"`
	ExpiryDateTime       *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=expiryDateTime" json:"expiryDateTime,omitempty"`
	ExpiredDateTime      *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=expiredDateTime" json:"expiredDateTime,omitempty"`
	CreatedDateTime      *google_protobuf.Timestamp `protobuf:"bytes,4,opt,name=createdDateTime" json:"createdDateTime,omitempty"`
	ActivationDateTime   *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=activationDateTime" json:"activationDateTime,omitempty"`
	CancellationDateTime *google_protobuf.Timestamp `protobuf:"bytes,6,opt,name=cancellationDateTime" json:"cancellationDateTime,omitempty"`
	SubscriptionStatus   SubscriptionStatus         `protobuf:"varint,7,opt,name=subscriptionStatus,enum=account.SubscriptionStatus" json:"subscriptionStatus,omitempty"`
	ClientReference      string                     `protobuf:"bytes,8,opt,name=clientReference" json:"clientReference,omitempty"`
	VendorClientId       string                     `protobuf:"bytes,9,opt,name=vendorClientId" json:"vendorClientId,omitempty"`
}

func (m *ApplicationSubscription) Reset()                    { *m = ApplicationSubscription{} }
func (m *ApplicationSubscription) String() string            { return proto.CompactTextString(m) }
func (*ApplicationSubscription) ProtoMessage()               {}
func (*ApplicationSubscription) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ApplicationSubscription) GetExpiryDateTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.ExpiryDateTime
	}
	return nil
}

func (m *ApplicationSubscription) GetExpiredDateTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.ExpiredDateTime
	}
	return nil
}

func (m *ApplicationSubscription) GetCreatedDateTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedDateTime
	}
	return nil
}

func (m *ApplicationSubscription) GetActivationDateTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.ActivationDateTime
	}
	return nil
}

func (m *ApplicationSubscription) GetCancellationDateTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.CancellationDateTime
	}
	return nil
}

type AccountStatementReport struct {
	AccountStatement []*StatementItem `protobuf:"bytes,1,rep,name=accountStatement" json:"accountStatement,omitempty"`
	MoreAvailable    bool             `protobuf:"varint,2,opt,name=moreAvailable" json:"moreAvailable,omitempty"`
}

func (m *AccountStatementReport) Reset()                    { *m = AccountStatementReport{} }
func (m *AccountStatementReport) String() string            { return proto.CompactTextString(m) }
func (*AccountStatementReport) ProtoMessage()               {}
func (*AccountStatementReport) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *AccountStatementReport) GetAccountStatement() []*StatementItem {
	if m != nil {
		return m.AccountStatement
	}
	return nil
}

type AccountFundsRequest struct {
	Wallet Wallet `protobuf:"varint,6,opt,name=wallet,enum=account.Wallet" json:"wallet,omitempty"`
}

func (m *AccountFundsRequest) Reset()                    { *m = AccountFundsRequest{} }
func (m *AccountFundsRequest) String() string            { return proto.CompactTextString(m) }
func (*AccountFundsRequest) ProtoMessage()               {}
func (*AccountFundsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type AccountStatementRequest struct {
	Locale        string                              `protobuf:"bytes,1,opt,name=locale" json:"locale,omitempty"`
	FromRecord    int32                               `protobuf:"varint,2,opt,name=fromRecord" json:"fromRecord,omitempty"`
	RecordCount   int32                               `protobuf:"varint,3,opt,name=recordCount" json:"recordCount,omitempty"`
	ItemDateRange *TimeRange                          `protobuf:"bytes,4,opt,name=itemDateRange" json:"itemDateRange,omitempty"`
	IncludeItem   AccountStatementRequest_IncludeItem `protobuf:"varint,5,opt,name=includeItem,enum=account.AccountStatementRequest_IncludeItem" json:"includeItem,omitempty"`
	Wallet        Wallet                              `protobuf:"varint,6,opt,name=wallet,enum=account.Wallet" json:"wallet,omitempty"`
}

func (m *AccountStatementRequest) Reset()                    { *m = AccountStatementRequest{} }
func (m *AccountStatementRequest) String() string            { return proto.CompactTextString(m) }
func (*AccountStatementRequest) ProtoMessage()               {}
func (*AccountStatementRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *AccountStatementRequest) GetItemDateRange() *TimeRange {
	if m != nil {
		return m.ItemDateRange
	}
	return nil
}

type StatementItem struct {
	RefId         string                     `protobuf:"bytes,1,opt,name=refId" json:"refId,omitempty"`
	ItemDate      *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=itemDate" json:"itemDate,omitempty"`
	Amount        float32                    `protobuf:"fixed32,3,opt,name=amount" json:"amount,omitempty"`
	Balance       float32                    `protobuf:"fixed32,4,opt,name=balance" json:"balance,omitempty"`
	ItemClass     ItemClass                  `protobuf:"varint,5,opt,name=itemClass,enum=account.ItemClass" json:"itemClass,omitempty"`
	ItemClassData map[string]string          `protobuf:"bytes,6,rep,name=itemClassData" json:"itemClassData,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	LegacyData    *StatementLegacyData       `protobuf:"bytes,7,opt,name=legacyData" json:"legacyData,omitempty"`
}

func (m *StatementItem) Reset()                    { *m = StatementItem{} }
func (m *StatementItem) String() string            { return proto.CompactTextString(m) }
func (*StatementItem) ProtoMessage()               {}
func (*StatementItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *StatementItem) GetItemDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.ItemDate
	}
	return nil
}

func (m *StatementItem) GetItemClassData() map[string]string {
	if m != nil {
		return m.ItemClassData
	}
	return nil
}

func (m *StatementItem) GetLegacyData() *StatementLegacyData {
	if m != nil {
		return m.LegacyData
	}
	return nil
}

type DeveloperApp struct {
	AppName     string                 `protobuf:"bytes,1,opt,name=appName" json:"appName,omitempty"`
	AppId       uint32                 `protobuf:"varint,2,opt,name=appId" json:"appId,omitempty"`
	AppVersions []*DeveloperAppVersion `protobuf:"bytes,3,rep,name=appVersions" json:"appVersions,omitempty"`
}

func (m *DeveloperApp) Reset()                    { *m = DeveloperApp{} }
func (m *DeveloperApp) String() string            { return proto.CompactTextString(m) }
func (*DeveloperApp) ProtoMessage()               {}
func (*DeveloperApp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *DeveloperApp) GetAppVersions() []*DeveloperAppVersion {
	if m != nil {
		return m.AppVersions
	}
	return nil
}

type TimeRange struct {
	From *google_protobuf.Timestamp `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	To   *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=to" json:"to,omitempty"`
}

func (m *TimeRange) Reset()                    { *m = TimeRange{} }
func (m *TimeRange) String() string            { return proto.CompactTextString(m) }
func (*TimeRange) ProtoMessage()               {}
func (*TimeRange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *TimeRange) GetFrom() *google_protobuf.Timestamp {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *TimeRange) GetTo() *google_protobuf.Timestamp {
	if m != nil {
		return m.To
	}
	return nil
}

type SubscriptionHistory struct {
	SubscriptionToken    string                     `protobuf:"bytes,1,opt,name=subscriptionToken" json:"subscriptionToken,omitempty"`
	ExpiryDateTime       *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=expiryDateTime" json:"expiryDateTime,omitempty"`
	ExpiredDateTime      *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=expiredDateTime" json:"expiredDateTime,omitempty"`
	CreatedDateTime      *google_protobuf.Timestamp `protobuf:"bytes,4,opt,name=createdDateTime" json:"createdDateTime,omitempty"`
	ActivationDateTime   *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=activationDateTime" json:"activationDateTime,omitempty"`
	CancellationDateTime *google_protobuf.Timestamp `protobuf:"bytes,6,opt,name=cancellationDateTime" json:"cancellationDateTime,omitempty"`
	SubscriptionStatus   SubscriptionStatus         `protobuf:"varint,7,opt,name=subscriptionStatus,enum=account.SubscriptionStatus" json:"subscriptionStatus,omitempty"`
	ClientReference      string                     `protobuf:"bytes,8,opt,name=clientReference" json:"clientReference,omitempty"`
}

func (m *SubscriptionHistory) Reset()                    { *m = SubscriptionHistory{} }
func (m *SubscriptionHistory) String() string            { return proto.CompactTextString(m) }
func (*SubscriptionHistory) ProtoMessage()               {}
func (*SubscriptionHistory) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *SubscriptionHistory) GetExpiryDateTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.ExpiryDateTime
	}
	return nil
}

func (m *SubscriptionHistory) GetExpiredDateTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.ExpiredDateTime
	}
	return nil
}

func (m *SubscriptionHistory) GetCreatedDateTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedDateTime
	}
	return nil
}

func (m *SubscriptionHistory) GetActivationDateTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.ActivationDateTime
	}
	return nil
}

func (m *SubscriptionHistory) GetCancellationDateTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.CancellationDateTime
	}
	return nil
}

func init() {
	proto.RegisterType((*SubscriptionTokenInfo)(nil), "account.SubscriptionTokenInfo")
	proto.RegisterType((*AccountSubscription)(nil), "account.AccountSubscription")
	proto.RegisterType((*CurrencyRate)(nil), "account.CurrencyRate")
	proto.RegisterType((*AccountFundsResponse)(nil), "account.AccountFundsResponse")
	proto.RegisterType((*DeveloperAppVersion)(nil), "account.DeveloperAppVersion")
	proto.RegisterType((*StatementLegacyData)(nil), "account.StatementLegacyData")
	proto.RegisterType((*TransferResponse)(nil), "account.TransferResponse")
	proto.RegisterType((*AccountDetailsResponse)(nil), "account.AccountDetailsResponse")
	proto.RegisterType((*ApplicationSubscription)(nil), "account.ApplicationSubscription")
	proto.RegisterType((*AccountStatementReport)(nil), "account.AccountStatementReport")
	proto.RegisterType((*AccountFundsRequest)(nil), "account.AccountFundsRequest")
	proto.RegisterType((*AccountStatementRequest)(nil), "account.AccountStatementRequest")
	proto.RegisterType((*StatementItem)(nil), "account.StatementItem")
	proto.RegisterType((*DeveloperApp)(nil), "account.DeveloperApp")
	proto.RegisterType((*TimeRange)(nil), "account.TimeRange")
	proto.RegisterType((*SubscriptionHistory)(nil), "account.SubscriptionHistory")
	proto.RegisterEnum("account.Exception", Exception_name, Exception_value)
	proto.RegisterEnum("account.LoginStatus", LoginStatus_name, LoginStatus_value)
	proto.RegisterEnum("account.SubscriptionStatus", SubscriptionStatus_name, SubscriptionStatus_value)
	proto.RegisterEnum("account.Status", Status_name, Status_value)
	proto.RegisterEnum("account.Wallet", Wallet_name, Wallet_value)
	proto.RegisterEnum("account.ItemClass", ItemClass_name, ItemClass_value)
	proto.RegisterEnum("account.StatementLegacyData_WinLose", StatementLegacyData_WinLose_name, StatementLegacyData_WinLose_value)
	proto.RegisterEnum("account.AccountStatementRequest_IncludeItem", AccountStatementRequest_IncludeItem_name, AccountStatementRequest_IncludeItem_value)
}

func init() { proto.RegisterFile("account.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2387 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xec, 0x18, 0xcb, 0x72, 0xe3, 0xc6,
	0x71, 0x45, 0x4a, 0xa4, 0x38, 0x7a, 0x41, 0x23, 0x69, 0xcd, 0xd5, 0x3e, 0x4d, 0x6f, 0x62, 0x47,
	0x71, 0xc9, 0xa9, 0x75, 0x2a, 0xb5, 0xe5, 0x4a, 0xb9, 0x02, 0x81, 0x90, 0x84, 0x08, 0x04, 0x98,
	0x01, 0x28, 0xad, 0x72, 0x61, 0x61, 0xa9, 0x11, 0x0b, 0xb5, 0x20, 0x41, 0x03, 0xa0, 0xd6, 0xeb,
	0x43, 0x0e, 0x39, 0xe5, 0x9c, 0x5b, 0xee, 0xa9, 0x7c, 0x82, 0x7f, 0x20, 0x5f, 0x90, 0xfc, 0x4b,
	0x72, 0x4e, 0xf7, 0x0c, 0x00, 0x82, 0x8f, 0xb5, 0xb4, 0x29, 0x1f, 0x7d, 0x11, 0x31, 0xfd, 0x9a,
	0x7e, 0x77, 0x8f, 0xc8, 0x86, 0xd7, 0xeb, 0x85, 0xe3, 0x61, 0x72, 0x38, 0x8a, 0xc2, 0x24, 0xa4,
	0xd5, 0xf4, 0xb8, 0xff, 0xb4, 0x1f, 0x86, 0xfd, 0x80, 0x7f, 0x21, 0xc0, 0xaf, 0xc7, 0xd7, 0x5f,
	0x24, 0xfe, 0x80, 0xc7, 0x89, 0x37, 0x18, 0x49, 0xca, 0xc6, 0xf7, 0x65, 0xb2, 0xe7, 0x8c, 0x5f,
	0xc7, 0xbd, 0xc8, 0x1f, 0x25, 0x7e, 0x38, 0x74, 0xc3, 0x37, 0x7c, 0x68, 0x0c, 0xaf, 0x43, 0xfa,
	0x39, 0xd9, 0x8e, 0x67, 0x11, 0xf5, 0xa5, 0x67, 0x4b, 0x9f, 0xd5, 0xd8, 0x3c, 0x82, 0x9e, 0x92,
	0x6d, 0xaf, 0x97, 0xf8, 0x37, 0x5e, 0xc2, 0xaf, 0x9a, 0xf0, 0xc7, 0x85, 0x7b, 0xea, 0x25, 0xa0,
	0x5e, 0x7b, 0xb1, 0x7f, 0x28, 0x95, 0x38, 0xcc, 0x94, 0x38, 0x74, 0x33, 0x25, 0xd8, 0x3c, 0x13,
	0x3d, 0x22, 0x9b, 0xfc, 0xdb, 0x91, 0x1f, 0xbd, 0xcb, 0xc5, 0x94, 0x6f, 0x15, 0x33, 0xc3, 0x41,
	0x9b, 0x64, 0x4b, 0x40, 0x0a, 0xba, 0x2c, 0xdf, 0x2a, 0x64, 0x96, 0x85, 0x5a, 0x64, 0xb7, 0xe7,
	0x0d, 0x7b, 0x3c, 0x08, 0x3c, 0x34, 0x34, 0x17, 0xb5, 0x72, 0xab, 0xa8, 0x85, 0x7c, 0xf4, 0x8c,
	0xd0, 0xa2, 0xe3, 0x9c, 0xc4, 0x4b, 0xc6, 0x71, 0xbd, 0x02, 0xd2, 0x36, 0x5f, 0x3c, 0x3c, 0xcc,
	0x22, 0xe8, 0xcc, 0x91, 0xb0, 0x05, 0x6c, 0x8d, 0x7f, 0x2e, 0x91, 0x1d, 0x55, 0xb2, 0x14, 0x39,
	0x40, 0x69, 0x3a, 0x17, 0x9d, 0x18, 0xe2, 0x56, 0x06, 0x95, 0x9f, 0x2c, 0xbc, 0x24, 0x0f, 0x39,
	0x5b, 0xc0, 0x49, 0x3f, 0x23, 0x5b, 0xde, 0x68, 0x14, 0xf8, 0x3d, 0x61, 0x8b, 0xe5, 0xa5, 0x61,
	0xad, 0xb1, 0x59, 0x30, 0x7d, 0x41, 0x76, 0x0b, 0xa0, 0x73, 0x1e, 0xc5, 0xf0, 0x63, 0x5c, 0x89,
	0xf0, 0xd5, 0xd8, 0x42, 0x5c, 0xe3, 0x98, 0xac, 0x6b, 0xe3, 0x28, 0xe2, 0xc3, 0xde, 0x3b, 0x06,
	0x6e, 0xa2, 0x0d, 0xb2, 0xde, 0x4b, 0xcf, 0x5a, 0x78, 0xc5, 0xd3, 0x7c, 0x9b, 0x82, 0x51, 0x4a,
	0x96, 0x23, 0xa0, 0x15, 0x6a, 0x94, 0x98, 0xf8, 0x6e, 0xfc, 0xa5, 0x44, 0x76, 0x53, 0x6f, 0x1c,
	0x8f, 0x87, 0x57, 0x31, 0xe3, 0xf1, 0x28, 0x1c, 0xc6, 0x9c, 0xfe, 0x9a, 0xec, 0x79, 0x37, 0x9e,
	0x1f, 0x78, 0xaf, 0x03, 0xee, 0x86, 0x47, 0x3c, 0x39, 0xf2, 0x02, 0x8c, 0x8d, 0x90, 0x5c, 0x62,
	0x8b, 0x91, 0x74, 0x9f, 0xac, 0x42, 0x32, 0x84, 0xf1, 0x38, 0xca, 0xae, 0xc9, 0xcf, 0xf4, 0x90,
	0xd0, 0x88, 0x27, 0x9e, 0x3f, 0xe4, 0x57, 0x5a, 0x38, 0x18, 0xf8, 0x31, 0x9a, 0x22, 0x8c, 0x2c,
	0xb1, 0x05, 0x18, 0xfa, 0x9c, 0x6c, 0x64, 0xbc, 0xa6, 0x3f, 0xf0, 0x13, 0x91, 0x89, 0x25, 0x36,
	0x0d, 0x44, 0xc3, 0xaf, 0xfc, 0x58, 0x18, 0x80, 0x8e, 0x10, 0x39, 0x56, 0x62, 0x53, 0x30, 0x94,
	0x34, 0x0a, 0xfd, 0x61, 0x12, 0x67, 0x36, 0x60, 0xea, 0xac, 0xb0, 0x69, 0x60, 0xe3, 0x6f, 0x25,
	0xb2, 0xd3, 0xe4, 0x37, 0x3c, 0x08, 0x47, 0x3c, 0x52, 0x47, 0xa3, 0xd4, 0xd9, 0x74, 0x97, 0xac,
	0x84, 0x6f, 0x87, 0x3c, 0x4a, 0x7d, 0x2a, 0x0f, 0xf4, 0x11, 0xa9, 0xdd, 0xe4, 0x91, 0x42, 0x53,
	0x37, 0xd8, 0x04, 0x40, 0xeb, 0xa4, 0x9a, 0x1e, 0xd2, 0x28, 0x66, 0x47, 0xfa, 0x73, 0xb2, 0x59,
	0x08, 0xe8, 0x19, 0x7f, 0x27, 0xcc, 0xaa, 0xb1, 0x19, 0x28, 0xca, 0xbf, 0xe2, 0x81, 0x87, 0xa5,
	0xe9, 0x09, 0xa3, 0x56, 0xd9, 0x04, 0x80, 0x29, 0x53, 0x4c, 0x39, 0xc6, 0xbf, 0x19, 0x63, 0x05,
	0x0a, 0xc3, 0x56, 0xd9, 0x42, 0x1c, 0x7a, 0x4a, 0xa8, 0xde, 0xf2, 0x86, 0x5e, 0x1f, 0x68, 0xab,
	0x82, 0x76, 0x0a, 0x46, 0xef, 0x93, 0x8a, 0x68, 0x2c, 0xbc, 0xbe, 0x2a, 0xb0, 0xe9, 0xa9, 0xf1,
	0xaf, 0x0a, 0xd9, 0xc1, 0xfa, 0xe1, 0x03, 0x3e, 0x4c, 0x4c, 0xde, 0xf7, 0x7a, 0x52, 0x0f, 0x88,
	0xb7, 0x77, 0xd3, 0x6f, 0x47, 0x7e, 0x9e, 0x18, 0xf9, 0x19, 0x7d, 0xf0, 0x9a, 0x27, 0x8e, 0xff,
	0x5d, 0x96, 0x0a, 0xd9, 0x31, 0xc5, 0xb8, 0xef, 0x46, 0x3c, 0xf3, 0x4e, 0x7a, 0xc4, 0xa2, 0x81,
	0x4f, 0x0d, 0x2e, 0xea, 0x87, 0xd1, 0x3b, 0x41, 0x21, 0xdd, 0x33, 0x0b, 0x46, 0x3f, 0xf6, 0xf2,
	0x5c, 0xc9, 0x23, 0x0f, 0x7e, 0x9c, 0x86, 0xe2, 0x5d, 0x10, 0xd3, 0x61, 0x62, 0x5c, 0xa5, 0x51,
	0xcf, 0x8e, 0xf4, 0x19, 0x59, 0x13, 0x9f, 0x28, 0xce, 0x90, 0xee, 0x58, 0x61, 0x45, 0x10, 0xde,
	0x71, 0x3d, 0x0e, 0x82, 0x96, 0x17, 0xbd, 0xe1, 0x89, 0xa8, 0xe0, 0x55, 0x79, 0xc7, 0x34, 0x14,
	0xe9, 0xfa, 0x51, 0x18, 0xc7, 0x50, 0x08, 0xea, 0x00, 0xb3, 0xae, 0x5e, 0x13, 0x06, 0xcf, 0x40,
	0xe9, 0x13, 0x42, 0x06, 0x13, 0x59, 0x44, 0xc8, 0x2a, 0x40, 0x26, 0x78, 0x61, 0xf8, 0x5a, 0x11,
	0x2f, 0x6c, 0xfe, 0x8a, 0x90, 0x51, 0xe0, 0xf5, 0x64, 0xa7, 0xad, 0xaf, 0xdf, 0xda, 0x4d, 0x0b,
	0xd4, 0x68, 0x6d, 0xcc, 0x03, 0xde, 0x4b, 0x64, 0xc6, 0x6e, 0x48, 0x6b, 0x0b, 0x20, 0xac, 0x92,
	0xfc, 0x28, 0x14, 0xdc, 0x14, 0x0a, 0x4c, 0x03, 0xe9, 0x4b, 0x52, 0x03, 0xe1, 0x51, 0x22, 0x54,
	0xd8, 0xba, 0x55, 0x85, 0x09, 0x31, 0xc6, 0x36, 0x89, 0xbc, 0x61, 0xec, 0x09, 0x61, 0xc2, 0x44,
	0x45, 0xc6, 0x76, 0x06, 0x8c, 0x9a, 0x14, 0x40, 0xa0, 0xed, 0x36, 0xd0, 0x2d, 0xb3, 0x69, 0x20,
	0xfd, 0x9a, 0x54, 0xdf, 0xfa, 0x43, 0x33, 0x8c, 0x79, 0x9d, 0x8a, 0x51, 0xf0, 0x7c, 0xd2, 0xa5,
	0xe7, 0x53, 0xf5, 0xf0, 0x42, 0xd2, 0xb2, 0x8c, 0xa9, 0xf1, 0x27, 0x52, 0x4d, 0x61, 0x74, 0x93,
	0x10, 0xa6, 0x3b, 0x1d, 0xd3, 0xed, 0xea, 0x8c, 0x29, 0xf7, 0x0a, 0xe7, 0x63, 0xe3, 0x95, 0xb2,
	0x44, 0xb7, 0xc8, 0x5a, 0x7a, 0x36, 0x6d, 0xc7, 0x55, 0x4a, 0xf4, 0x01, 0xd9, 0x4b, 0x01, 0x96,
	0xed, 0x76, 0xd5, 0x76, 0xdb, 0x34, 0x34, 0xf5, 0xc8, 0xd4, 0x95, 0x72, 0x81, 0xf7, 0xc2, 0xb6,
	0x94, 0x65, 0xfa, 0x11, 0xd9, 0xd1, 0xec, 0x56, 0xcb, 0x70, 0x1c, 0xc3, 0xb6, 0xba, 0x4c, 0x3f,
	0xd7, 0x99, 0xa3, 0x9a, 0xca, 0x4a, 0xe3, 0x25, 0x51, 0x5c, 0x34, 0xe8, 0x9a, 0x47, 0x79, 0xd7,
	0x9d, 0xb3, 0x5c, 0xf6, 0x9c, 0x69, 0x60, 0xe3, 0xfb, 0x12, 0xb9, 0x9f, 0x36, 0xed, 0x26, 0xf6,
	0xcd, 0x60, 0xd2, 0xb6, 0xef, 0x32, 0x07, 0xa0, 0xb5, 0x5c, 0xfb, 0x51, 0x9c, 0x14, 0x66, 0xd2,
	0x04, 0x80, 0x25, 0x1d, 0x78, 0x29, 0x52, 0x56, 0x67, 0x7e, 0xc6, 0x04, 0x0d, 0xc2, 0x9e, 0x17,
	0x70, 0x21, 0x5b, 0x56, 0x66, 0x01, 0x82, 0xed, 0x23, 0xe2, 0x7d, 0xec, 0x7a, 0xb2, 0x18, 0xd3,
	0x13, 0xca, 0xc4, 0xfd, 0xe9, 0xbb, 0x70, 0x28, 0x7b, 0x2f, 0xc8, 0xcc, 0xce, 0x73, 0x0d, 0xbc,
	0x7a, 0x97, 0x06, 0xbe, 0xba, 0xa0, 0x81, 0x63, 0x8a, 0x0b, 0x96, 0x48, 0x9a, 0x5e, 0x13, 0x17,
	0x15, 0x41, 0x8d, 0x7f, 0x2f, 0x93, 0x8f, 0xd4, 0x49, 0x9f, 0x9d, 0x9a, 0xff, 0x1f, 0xb6, 0xb6,
	0xcd, 0x2f, 0x5b, 0xa5, 0x1f, 0x63, 0xd9, 0x2a, 0x7f, 0xf8, 0xb2, 0x05, 0x52, 0x7a, 0x11, 0x9f,
	0x5a, 0x1f, 0xef, 0xb0, 0xb2, 0xcd, 0xb0, 0xd0, 0xdf, 0x13, 0x9a, 0x6e, 0x94, 0x1f, 0xb6, 0xb0,
	0x2d, 0xe0, 0x7a, 0xef, 0xfa, 0x57, 0xf9, 0x51, 0xd7, 0xbf, 0xea, 0xff, 0xb5, 0xfe, 0x61, 0x17,
	0xea, 0x05, 0x3e, 0xb4, 0x06, 0xc6, 0xa1, 0xf0, 0x78, 0x96, 0x4c, 0xd0, 0x85, 0x66, 0xc0, 0xd8,
	0xd5, 0x61, 0x16, 0x5c, 0x85, 0x91, 0x26, 0x10, 0x50, 0x8c, 0x32, 0xa3, 0x66, 0xa0, 0x8d, 0x3f,
	0x2f, 0xe5, 0xd5, 0x98, 0xf7, 0x1d, 0xc6, 0x47, 0x61, 0x94, 0x40, 0x96, 0x28, 0xde, 0x0c, 0x26,
	0xdd, 0x28, 0xef, 0xcf, 0xf7, 0x2a, 0x03, 0x7e, 0xd8, 0x1c, 0x3d, 0xe6, 0xfe, 0x20, 0x8c, 0xb8,
	0x9a, 0xed, 0x5b, 0x22, 0xd1, 0x56, 0xd9, 0x34, 0xb0, 0xf1, 0x75, 0xbe, 0xd4, 0xa6, 0x6b, 0xdc,
	0x37, 0x63, 0xf0, 0x29, 0xfd, 0x94, 0x54, 0xde, 0x7a, 0x41, 0xc0, 0x93, 0x74, 0x5b, 0xde, 0xca,
	0xaf, 0xbd, 0x10, 0x60, 0x96, 0xa2, 0x1b, 0xff, 0x2d, 0x41, 0x65, 0xcc, 0x19, 0x21, 0x85, 0x40,
	0x55, 0xcb, 0x1a, 0x4f, 0xcb, 0x21, 0x3d, 0x61, 0x37, 0xb8, 0x8e, 0xc2, 0x01, 0xe3, 0xbd, 0x30,
	0x92, 0x3b, 0xd0, 0x0a, 0x2b, 0x40, 0xb0, 0x1e, 0x23, 0xf1, 0xa5, 0x89, 0x99, 0x58, 0x96, 0x23,
	0xa7, 0x00, 0x82, 0x61, 0xb2, 0xe1, 0xc3, 0x5d, 0x18, 0x69, 0xe6, 0x0d, 0xfb, 0x59, 0xe6, 0xd2,
	0x5c, 0x4b, 0x8c, 0xbf, 0xc0, 0xb0, 0x69, 0x42, 0xc8, 0xb1, 0x35, 0x7f, 0xd8, 0x0b, 0xc6, 0x57,
	0x1c, 0xdd, 0x26, 0x12, 0x75, 0xf3, 0xc5, 0xe7, 0x39, 0xdf, 0x7b, 0x4c, 0x39, 0x34, 0x26, 0x3c,
	0xac, 0x28, 0xe0, 0xee, 0x8e, 0x82, 0x8b, 0x0b, 0x42, 0x68, 0x95, 0x94, 0x55, 0xd3, 0x84, 0x91,
	0x51, 0x27, 0xbb, 0x4d, 0xbd, 0x6d, 0x3b, 0x86, 0xeb, 0x74, 0x2f, 0x0c, 0xf7, 0xb4, 0xc9, 0xd4,
	0x0b, 0xd5, 0x74, 0x60, 0x78, 0xac, 0x93, 0x55, 0xfd, 0x95, 0x76, 0xaa, 0x5a, 0x27, 0x3a, 0x4c,
	0x0e, 0x18, 0x0f, 0x6d, 0xfb, 0x4c, 0x67, 0x5d, 0x66, 0xdb, 0x2d, 0xa5, 0xdc, 0xf8, 0x6b, 0x99,
	0x6c, 0x4c, 0xa5, 0x00, 0xee, 0x9b, 0x11, 0xbf, 0xce, 0x7b, 0xbf, 0x3c, 0xd0, 0xdf, 0x90, 0xd5,
	0xcc, 0x03, 0x77, 0x68, 0x35, 0x39, 0xad, 0xd8, 0xe8, 0x06, 0xb9, 0xff, 0x4b, 0x2c, 0x3d, 0x89,
	0x1d, 0x2c, 0x6d, 0xa6, 0xcb, 0xe9, 0x76, 0x96, 0xb6, 0xd1, 0x5f, 0x91, 0x1a, 0x72, 0x6b, 0xd0,
	0xf5, 0xe3, 0xd4, 0xb1, 0x93, 0x80, 0x18, 0x19, 0x86, 0x4d, 0x88, 0xa8, 0x2d, 0xc3, 0x28, 0x0e,
	0x62, 0x5f, 0xad, 0x88, 0x1c, 0xff, 0xc5, 0xe2, 0x1c, 0x9f, 0xc8, 0x40, 0x5a, 0x1d, 0x9b, 0x33,
	0x9b, 0xe6, 0xa7, 0xbf, 0x85, 0x39, 0x93, 0x4f, 0x6e, 0x51, 0xe9, 0x6b, 0x2f, 0x1e, 0xfd, 0xd0,
	0x74, 0x67, 0x05, 0xfa, 0xfd, 0xdf, 0x11, 0x3a, 0x7f, 0x05, 0x55, 0x48, 0xf9, 0x0d, 0x6c, 0xdb,
	0xd2, 0xa9, 0xf8, 0x89, 0x8e, 0xbe, 0xf1, 0x82, 0x71, 0x36, 0x03, 0xe5, 0xe1, 0xab, 0xd2, 0xcb,
	0x25, 0x58, 0x0d, 0xd6, 0x8b, 0x2f, 0x01, 0x74, 0x16, 0xac, 0xe7, 0x62, 0x24, 0x4a, 0xfe, 0xec,
	0x88, 0x32, 0xe0, 0x33, 0x7f, 0x02, 0xc8, 0x03, 0xac, 0x26, 0x6b, 0x5e, 0xfe, 0x80, 0x88, 0xc1,
	0xf3, 0xe5, 0x29, 0x03, 0x16, 0xbc, 0x32, 0x58, 0x91, 0xa1, 0xd1, 0x27, 0xb5, 0x3c, 0xf3, 0xe1,
	0xdd, 0xb4, 0x8c, 0x45, 0x25, 0x6e, 0xfe, 0xe1, 0xa8, 0x0b, 0x3a, 0x7a, 0x40, 0x4a, 0x49, 0x78,
	0x87, 0x1c, 0x01, 0xaa, 0xc6, 0x3f, 0x96, 0x61, 0xaf, 0x2f, 0x34, 0xc9, 0x53, 0x3f, 0x4e, 0x60,
	0xc3, 0xfe, 0x69, 0x18, 0xfe, 0x34, 0x0c, 0xa7, 0xc0, 0x07, 0x7f, 0x2f, 0x93, 0x9a, 0xfe, 0x6d,
	0x8f, 0xcb, 0x5d, 0xe9, 0x3e, 0x54, 0x98, 0x75, 0xae, 0x9a, 0x46, 0xb3, 0x6b, 0x58, 0xed, 0x8e,
	0xdb, 0x6d, 0xaa, 0xae, 0x0a, 0x4d, 0xf0, 0x29, 0x79, 0x98, 0xc1, 0x1d, 0x5d, 0x2e, 0xbc, 0x86,
	0x75, 0x6c, 0xb3, 0x96, 0xea, 0xc2, 0x37, 0xf4, 0xc2, 0x5d, 0xa2, 0x74, 0x2c, 0xfd, 0x55, 0x5b,
	0xd7, 0x5c, 0xbd, 0x89, 0xcb, 0xb6, 0xcd, 0xa0, 0x27, 0xee, 0x90, 0xad, 0x8c, 0x0d, 0x56, 0xe9,
	0xee, 0x99, 0x7e, 0x09, 0x7b, 0xb4, 0x42, 0xd6, 0x1d, 0x9d, 0x9d, 0x1b, 0x9a, 0xde, 0x3d, 0xea,
	0x38, 0x97, 0xb0, 0x49, 0x6f, 0x93, 0x0d, 0xd7, 0x68, 0xe9, 0x76, 0xc7, 0x4d, 0x39, 0x57, 0x50,
	0x91, 0x66, 0x47, 0x2c, 0xdf, 0xae, 0x2e, 0x78, 0x2d, 0xb5, 0xa5, 0x2b, 0x15, 0xfa, 0x10, 0xa6,
	0x99, 0x94, 0xd4, 0xd5, 0x98, 0x2e, 0x6e, 0xef, 0x1e, 0xab, 0x86, 0xa9, 0x37, 0x95, 0x2a, 0x6e,
	0xe4, 0x88, 0x9c, 0x45, 0xac, 0x62, 0x6f, 0xb6, 0xec, 0x4c, 0x73, 0xa5, 0x96, 0x9e, 0x33, 0x95,
	0x08, 0xf6, 0x78, 0xa7, 0x73, 0xe4, 0x68, 0xcc, 0x68, 0x0b, 0x46, 0x30, 0xc4, 0x60, 0xc0, 0xb9,
	0x06, 0xa3, 0x70, 0x3f, 0x37, 0xbc, 0x48, 0xe1, 0x42, 0xab, 0xb7, 0x94, 0x75, 0xba, 0x47, 0xb6,
	0x5d, 0xdb, 0xee, 0xb6, 0x54, 0xeb, 0x12, 0x9e, 0x00, 0x7f, 0xe8, 0xe8, 0x8e, 0xeb, 0x28, 0x1b,
	0x45, 0x3f, 0x6a, 0xa6, 0xa1, 0x5b, 0x2e, 0x20, 0x8f, 0x95, 0x4d, 0x7c, 0x5e, 0xc0, 0xf0, 0x30,
	0x75, 0xb7, 0xeb, 0x32, 0xd5, 0x72, 0x8e, 0x61, 0x5c, 0x48, 0x8b, 0xb7, 0x60, 0x79, 0xaf, 0x67,
	0x2c, 0xe7, 0xba, 0xd5, 0xb4, 0x59, 0xc6, 0x69, 0x34, 0x15, 0xe5, 0xe0, 0x3f, 0x55, 0xb2, 0x66,
	0x86, 0x7d, 0x3f, 0x0b, 0xf0, 0x3e, 0xac, 0x26, 0x9a, 0x66, 0x77, 0x00, 0xaf, 0x9a, 0x60, 0x6f,
	0xf3, 0x12, 0x5e, 0x30, 0xda, 0x19, 0xe8, 0x7c, 0x0f, 0x2f, 0xcf, 0x70, 0x96, 0x7d, 0x91, 0xc1,
	0x97, 0xe8, 0x27, 0xe4, 0x69, 0x06, 0x6f, 0xc3, 0x0d, 0x86, 0x75, 0xd2, 0x6d, 0xab, 0x8e, 0x73,
	0x61, 0x33, 0xd0, 0x32, 0x1b, 0x63, 0xe8, 0xc3, 0x13, 0xbc, 0x36, 0xbd, 0xbd, 0xa5, 0x3a, 0xae,
	0xce, 0x20, 0x6c, 0x1f, 0x93, 0xc7, 0x0b, 0x10, 0xe0, 0x15, 0x07, 0x85, 0xc1, 0x05, 0xcb, 0x98,
	0x25, 0x47, 0xba, 0xeb, 0xa2, 0x60, 0x78, 0x29, 0xb9, 0xcc, 0x10, 0xc9, 0x00, 0xf7, 0xcb, 0x2c,
	0x11, 0x51, 0xd5, 0x74, 0x06, 0x2a, 0x77, 0xdc, 0x53, 0xe1, 0x2e, 0xe1, 0xe5, 0x0a, 0xda, 0x2e,
	0x15, 0x98, 0x28, 0x94, 0x63, 0xab, 0x94, 0x90, 0x8a, 0x06, 0xcf, 0x33, 0x11, 0x49, 0xd0, 0xa2,
	0xa9, 0x5a, 0x86, 0x73, 0x2a, 0x64, 0xd8, 0xcc, 0xf8, 0xa3, 0x0c, 0x75, 0x4e, 0x5e, 0xc3, 0x90,
	0x35, 0x75, 0xab, 0xa5, 0xb2, 0xb3, 0x6e, 0xcb, 0x38, 0x61, 0x33, 0x78, 0x82, 0x49, 0x39, 0x49,
	0x2d, 0x4d, 0x65, 0x4d, 0x07, 0xe2, 0x0c, 0x79, 0xa5, 0xb7, 0x20, 0x5d, 0x40, 0xdb, 0x13, 0xc3,
	0x92, 0x8f, 0x3f, 0xd3, 0xb4, 0x2f, 0x80, 0x63, 0x9d, 0xfe, 0x92, 0x7c, 0x6a, 0x58, 0x60, 0xac,
	0x25, 0x64, 0xa9, 0x66, 0x17, 0xbe, 0x5b, 0x4e, 0x17, 0x9c, 0xa9, 0xb7, 0x5d, 0xd5, 0x82, 0x44,
	0xce, 0xc5, 0x6f, 0x40, 0xe9, 0x3d, 0xcf, 0x43, 0x6f, 0x5b, 0x16, 0x14, 0x84, 0x71, 0x6e, 0xb8,
	0x97, 0x90, 0x31, 0x40, 0x75, 0xd2, 0x31, 0x55, 0x17, 0x42, 0xdb, 0x3c, 0x83, 0x64, 0xb8, 0x13,
	0xa5, 0xe1, 0x42, 0x6e, 0x3c, 0x23, 0x8f, 0x32, 0xca, 0x8e, 0x83, 0x7a, 0xb4, 0xf4, 0x2e, 0xe0,
	0x32, 0x67, 0x29, 0x8a, 0x90, 0xe5, 0x02, 0x81, 0x6a, 0xa1, 0x2c, 0x48, 0x2e, 0xcd, 0x5d, 0xa8,
	0xdf, 0x36, 0x3e, 0x79, 0xcf, 0x2e, 0xb5, 0x2c, 0x6e, 0x0a, 0x85, 0x0d, 0xe9, 0x93, 0x16, 0xbc,
	0x6a, 0x8d, 0xb6, 0xa9, 0x0b, 0xe9, 0x72, 0xcd, 0xe9, 0x3a, 0x78, 0x09, 0x94, 0x12, 0xf8, 0xd2,
	0x35, 0xe0, 0x5d, 0xbb, 0x03, 0x0f, 0xba, 0x27, 0xc2, 0x2f, 0xa9, 0xe3, 0x21, 0xb4, 0x47, 0x97,
	0xd3, 0x36, 0xed, 0xde, 0x46, 0x03, 0xd6, 0xec, 0x61, 0x03, 0xc8, 0xf2, 0x0f, 0xe9, 0x94, 0xfb,
	0xf4, 0x31, 0x79, 0xd0, 0x86, 0x8b, 0x85, 0x6f, 0x5b, 0x50, 0xa5, 0x90, 0x68, 0x13, 0x95, 0x3f,
	0xc2, 0x88, 0x3a, 0xba, 0xd6, 0x61, 0xe8, 0x1c, 0x51, 0x62, 0x18, 0xd1, 0x0b, 0x66, 0x83, 0x80,
	0x2f, 0x5f, 0x29, 0x75, 0x74, 0x4f, 0x8e, 0x5f, 0x94, 0x78, 0x0f, 0xb0, 0xc3, 0x38, 0xba, 0x79,
	0x0c, 0x85, 0xad, 0x99, 0x1d, 0x4c, 0xd6, 0x7d, 0xcc, 0x39, 0xa7, 0xad, 0x42, 0xac, 0x17, 0x24,
	0xc9, 0x43, 0xfa, 0x33, 0xf2, 0x31, 0x60, 0x45, 0xa2, 0xbd, 0x3f, 0xd8, 0x8f, 0xe8, 0x06, 0xa9,
	0x4d, 0x0a, 0xe0, 0x31, 0x2a, 0xea, 0xea, 0xe6, 0x11, 0x96, 0xb7, 0x60, 0x82, 0x50, 0x34, 0x0d,
	0x14, 0xed, 0x40, 0xff, 0x52, 0x9e, 0x50, 0x4a, 0x36, 0x21, 0x34, 0xc2, 0xf2, 0xb4, 0xae, 0x9e,
	0xa2, 0x1e, 0xd3, 0xb0, 0x42, 0x49, 0x3d, 0x3b, 0xb8, 0x24, 0x74, 0xbe, 0xe5, 0xe3, 0xb5, 0x2a,
	0x66, 0x0b, 0x64, 0x30, 0x16, 0x3c, 0x84, 0xb4, 0x63, 0x4d, 0x00, 0x4b, 0x88, 0xd7, 0x50, 0x55,
	0x13, 0xdb, 0x5f, 0x89, 0xae, 0x91, 0x6a, 0xd6, 0xd1, 0xca, 0xd9, 0x62, 0xbb, 0x7c, 0xb0, 0x47,
	0x2a, 0xa9, 0x38, 0xc0, 0x3b, 0x1d, 0xb0, 0xcf, 0x71, 0x94, 0x7b, 0x07, 0xcf, 0x48, 0x45, 0x6e,
	0xc6, 0xb4, 0x42, 0x4a, 0x9d, 0x33, 0xf9, 0x4f, 0x13, 0xb5, 0x03, 0x5e, 0x15, 0xe9, 0xa5, 0x2c,
	0x1d, 0xd4, 0x49, 0x2d, 0x5f, 0xc3, 0x90, 0xb7, 0x63, 0x9d, 0x41, 0x9f, 0xb1, 0x94, 0x7b, 0xaf,
	0x2b, 0x62, 0xda, 0x7d, 0xf9, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1a, 0xca, 0xfa, 0x20, 0x7d,
	0x19, 0x00, 0x00,
}
